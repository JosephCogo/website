function initSocket(a,b){emberStore=a,connectSocket(function(){handleMessages(),b()})}function connectSocket(a){socket=io.connect("http://localhost:3000",{query:"token="+localStorage.token}),socket.on("connect",function(b){console.log(b),a(null,b)})}function getSocket(){return socket}function handleMessages(){console.log("Handle Messages"),socket.on("sendquestions",function(a){console.log(a.question.qid),emberStore.push("question",{id:a.question.qid,qbody:a.question.question})}),socket.on("unsolvedquestions",function(a){console.log(a.question.qid)}),socket.on("solvedquestions",function(){console.log("solved")})}function getSkills(a,b){console.log(a),socket.emit("autoskill",{skill:a}),socket.once("autoskill",function(a){console.log(a.m);var c=a.message.suggest[0];console.log(c),skills=[];for(var d=0;d<c.options.length;d++)skills.push({value:c.options[d].text});b()})}function autoSkills(){return skills}function getQuestions(a,b){socket.emit("autoquestion",{question:a}),socket.once("autoquestion",function(a){var c=a.message.hits.hits;questions=[];for(var d=0;d<c.length;d++)questions.push({value:c[d]._source.qBody});b()})}function autoQuestions(){return questions}function addSkills(a,b){console.log(a),socket.emit("addskill",{skills:a}),socket.once("addedskills",function(){console.info("successfully added skills"),b()})}function askQuestion(a,b,c){console.log(a+" "+b),socket.emit("askquestion",{question:a,skills:b}),socket.once("askedQuestion",function(){console.info("asked success"),c()})}function answerQuestion(a,b){socket.emit("answerquestion",{answer:a,qid:b})}App=Ember.Application.create(),App.ApplicationAdapter=DS.FixtureAdapter,App.Router.map(function(){this.resource("login"),this.resource("expertise"),this.resource("questionspage",function(){this.resource("askaquestion",function(){this.resource("ask"),this.resource("asksuccess"),this.resource("solved",function(){this.route("solvedanswer",{path:"/:question_id"})})}),this.resource("answeraquestion",function(){this.resource("answer",{path:"/:question_id"})})})}),App.IndexRoute=Ember.Route.extend({redirect:function(){var a=this,b=this.store;Ember.isEmpty(localStorage.token)?a.transitionTo("login"):$.ajax({url:"http://localhost:3000/refreshtoken",type:"post",data:{token:localStorage.token},statusCode:{200:function(c){localStorage.token=c.token,initSocket(b,function(){console.info("Successfully Connected. Transitioning to Ask a question"),a.transitionTo("ask")})},401:function(){console.log("ERROR"),a.transitionTo("login")}}})}}),App.LoginRoute=Ember.Route.extend({model:function(){return{}}}),App.LoginController=Ember.ObjectController.extend({actions:{login:function(){var a=this;$.ajax({url:"http://localhost:3000/login",type:"post",data:{email:this.get("email"),password:this.get("password")},statusCode:{200:function(b){localStorage.token=b.token;var c=b.firsttime;initSocket(this.store,function(){console.info("Sockets connected"),$(".application-content").fadeTo(500,0,function(){console.log(c),a.replaceRoute(c?"expertise":"ask")})})},400:function(){console.log("Invalid Username or Password");var a=$(".submit");a.button("reset"),$("#loginerror").removeClass("hide")}}})},register:function(){var a=this;console.log("register"),a.transitionToRoute("register")}}}),App.RegisterRoute=Ember.Route.extend({model:function(){return{}}}),App.RegisterController=Ember.ObjectController.extend({actions:{register:function(){}}}),App.ExpertiseRoute=Ember.Route.extend({setupController:function(){Ember.isEmpty(getSocket())&&initSocket(this.store,function(){console.info("Successfully Reconnected")}),$(".application-content").fadeTo(500,1)}}),App.ExpertiseController=Ember.ObjectController.extend({actions:{submit:function(){var a=this;addSkills($("#tokenfield-typeahead").tokenfield("getTokensList"),function(){$(".application-content").fadeTo(500,0,function(){a.replaceRoute("ask")})})}}}),App.QuestionspageRoute=Ember.Route.extend({setupController:function(){Ember.isEmpty(getSocket())&&initSocket(this.store,function(){console.info("Successfully Reconnected")}),$(".application-content").fadeTo(500,1)}}),App.QuestionspageController=Ember.Controller.extend({ask:!1,answer:!1,actions:{toAnswers:function(){var a=this;$(".content").fadeTo(200,0,function(){a.transitionToRoute("answeraquestion")})},toQuestions:function(){answer=!1,this.set("answer",!1),this.set("ask","active-link");var a=this;$(".content").fadeTo(200,0,function(){a.transitionToRoute("ask")})}}}),App.AskaquestionRoute=Ember.Route.extend({model:function(){var a=this.store;return a.find("answer"),a.find("question")},setupController:function(a,b){this._super(a,b),$(".questions-content-area").fadeTo(200,1),this.controllerFor("questionspage").set("ask","active-link"),this.controllerFor("questionspage").set("answer",!1)}}),App.AskaquestionController=Ember.ArrayController.extend({askSelected:"selected",solvedSelected:!1,solved:"(2)",actions:{logout:function(){localStorage.removeItem("token"),localStorage.removeItem("idUser");App.AskaquestionRoute;this.transitionTo("index")},ask:function(){var a=this;$(".questionsOutlet").fadeTo(200,0,function(){a.transitionToRoute("ask")})},solved:function(){var a=this;$(".questionsOutlet").fadeTo(200,0,function(){a.transitionToRoute("solved")})}}}),App.AskRoute=Ember.Route.extend({setupController:function(){$(".content").fadeTo(300,1),$(".questionsOutlet").fadeTo(200,1),this.controllerFor("askaquestion").set("askSelected","selected"),this.controllerFor("askaquestion").set("solvedSelected",!1)}}),App.AskController=Ember.Controller.extend({actions:{askquestion:function(){var a=this;$(".btn").button("loading"),askQuestion($("#questions").val(),$("#tagquestion").tokenfield("getTokensList"),function(){$(".questionsOutlet").fadeTo(200,0,function(){a.replaceRoute("asksuccess")})})}}}),App.AsksuccessRoute=Ember.Route.extend({setupController:function(){$(".questionsOutlet").fadeTo(200,1)}}),App.AsksuccessController=Ember.Controller.extend({actions:{askAnotherQuestion:function(){console.log("bang");var a=this;$(".questionsOutlet").fadeTo(200,0,function(){a.replaceRoute("ask")})}}}),App.AnswerRoute=Ember.Route.extend({setupController:function(){}}),App.AnswerController=Ember.ObjectController.extend({actions:{answer:function(){answerQuestion(this.get("answerText"),this.get("id"))}}}),App.AnsweraquestionRoute=Ember.Route.extend({model:function(){var a=this.store;return a.find("question")},setupController:function(a,b){this._super(a,b),$(".content").fadeTo(300,1),this.controllerFor("questionspage").set("answer","active-link"),this.controllerFor("questionspage").set("ask",!1)}}),App.AnsweraquestionController=Ember.ArrayController.extend({actions:{answer:function(){console.log(this.get("answerText"))}}}),App.SolvedIndexRoute=Ember.Route.extend({renderTemplate:function(){this.render("solvedindex")},model:function(){var a=this.store;return a.find("solvedquestion")},setupController:function(a,b){this._super(a,b),$(".questionsOutlet").fadeTo(200,1),this.controllerFor("askaquestion").set("askSelected",!1),this.controllerFor("askaquestion").set("solvedSelected","selected")}}),App.SolvedIndexController=Ember.ArrayController.extend({actions:{toSolvedAnswer:function(a){var b=this;b.transitionToRoute("solved.solvedanswer",a)}}}),App.SolvedSolvedanswerRoute=Ember.Route.extend({renderTemplate:function(){this.render("solvedsolvedanswer")},model:function(a){return console.log(a),Ember.RSVP.hash({solvedquestion:this.store.find("solvedquestion",a.question_id),answers:this.store.find("answer",[1,2])})},setupController:function(a,b){a.set("model",b)}}),App.SolvedSolvedanswerController=Ember.ObjectController.extend({}),App.LoadingRoute=Ember.Route.extend({}),App.Question=DS.Model.extend({qbody:DS.attr("string")}),App.Answer=DS.Model.extend({abody:DS.attr("string")}),App.Solvedquestion=DS.Model.extend({qbody:DS.attr("string"),answers:DS.hasMany("answer")}),App.Question.FIXTURES=[],App.Solvedquestion.FIXTURES=[{id:1,qbody:"People often list double-entry bookkeeping as one of the key inventions that created the modern world. But why is marking down everything twice such a big deal?",answers:[1]},{id:2,qbody:"Other Awesome question 1",answers:[1,2]},{id:3,qbody:"Other Awesome question 2",answers:[]},{id:4,qbody:"Other Awesome question 3",answers:[]}],App.Answer.FIXTURES=[{id:1,abody:"I'm afraid you are misunderstanding the term double-entry.  It does not mean that every item is recorded twice. That would be crazy, needlessly redundant and grossly inefficient.  Double-entry simply means that every action has a corresponding and equal reaction.\nLife is about balance.  So is accounting.\nExample:  I receive a check for $1,000,000  Single entry:  Okay, I'm done.  Huh? What? Did you borrow it?  Did a customer pay you?  Did you sell something for cash?  Did you collect on a loan?  Did it fall from the sky? Explain, damn it!"},{id:2,abody:"Other Awesome answer 1"},{id:3,abody:"Other Awesome answer 1"},{id:4,abody:"Other Awesome answer 1"}];var socket,emberStore,skills=[],questions=[];App.QuestionView=Ember.View.extend({didInsertElement:function(){$(".questionParagraph").fadeTo(500,1)}}),App.YourAnswersView=Ember.View.extend({didInsertElement:function(){$(".solvedAnswersParagraph").fadeTo(500,1)}}),App.TagquestionView=Ember.View.extend({didInsertElement:function(){$("#tagquestion").on("tokenfield:preparetoken",function(a){for(var b=autoSkills(),c=!1,d=0;d<b.length;d++){var e=b[d];console.log(e.value),e.value.toUpperCase()===a.token.value.toUpperCase()&&(c=!0)}c||(a.token=!1)}).tokenfield({beautify:!1,typeahead:{minLength:1,source:function(a,b){getSkills($("#tagquestion").data("bs.tokenfield").$input.val(),function(){b(autoSkills())})}}})}}),App.LightbulbhelperView=Ember.View.extend({templateName:"lightbulbhelper",click:function(){$(".lightbulb-help > div").fadeToggle("slow")}}),App.SubmitButtonView=Ember.View.extend({click:function(){var a=$(".submit");a.button("loading")}}),App.ExpertiseView=Ember.View.extend({didInsertElement:function(){$("#tokenfield-typeahead").tokenfield({beautify:!1,typeahead:{minLength:1,source:function(a,b){getSkills($("#tokenfield-typeahead").data("bs.tokenfield").$input.val(),function(){b(autoSkills())})}}})}}),App.AlertView=Ember.View.extend({didInsertElement:function(){$(".alert").find(".close").on("click",function(){$("#loginerror").addClass("hide")})}}),App.QuestionareaView=Ember.View.extend({didInsertElement:function(){$("#questions").typeahead({hint:!0,highlight:!0,minLength:1},{displayKey:"value",source:function(a,b){console.log($("#questions").val()),getQuestions($("#questions").val(),function(){b(autoQuestions())})}})}}),App.QuestionsnavView=Ember.View.extend({templateName:"questionsnav"});